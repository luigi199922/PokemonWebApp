{"ast":null,"code":"import { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nimport axios from \"../../axios/auth\";\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logoutSuccess());\n}\nexport function* logoutSaga() {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n  yield put(actions.logoutSuccess());\n}\nexport function* authCheckState() {\n  const token = localStorage.getItem(\"token\");\n\n  if (!token) {\n    put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(localStorage.getItem(\"expirationDate\"));\n\n    if (expirationDate <= new Date()) {\n      put(actions.logout());\n    } else {\n      // const userId = localStorage.getItem(\"userId\");\n      // yield put(actions.authSuccess(token, userId));\n      yield put(actions.getUserCredentials(token));\n      yield put(actions.checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n    }\n  }\n}\nexport function* loginUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    email: action.email,\n    password: action.password\n  };\n  let url = \"login\";\n\n  try {\n    const res = yield axios.post(url, authData);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.getUserCredentials(res.data.token));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\nexport function* signupUserSaga(action) {\n  yield put(actions.authStart()); // Headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const username = action.username;\n  const email = action.email;\n  const password1 = action.password1;\n  const password2 = action.password2; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    email,\n    password1,\n    password2\n  });\n  let url = \"registration/\";\n\n  try {\n    const res = yield axios.post(url, body, config);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.authSuccess(res.data.token, action.email));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\nexport function* getUserCredentialsSaga(action) {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // If token, add to headers config\n\n  if (action.token) {\n    config.headers[\"Authorization\"] = `Token ${action.token}`;\n  } else {\n    yield put(actions.authFail({}));\n  }\n\n  try {\n    const res = yield axios.get(\"me\", config);\n    const userData = {\n      pk: res.data.pk,\n      username: res.data.username,\n      email: res.data.email,\n      first_name: res.data.first_name,\n      last_name: res.data.last_name\n    };\n    yield put(actions.authSuccess(action.token, userData));\n  } catch (error) {\n    yield put(actions.authFail(error));\n  }\n}","map":{"version":3,"sources":["/Users/luispreciado/Documents/CSProjects/WebDevelopment/poke-api/gui/src/store/saga/auth.js"],"names":["put","delay","actions","axios","checkAuthTimeoutSaga","action","expirationTime","logoutSuccess","logoutSaga","localStorage","removeItem","authCheckState","token","getItem","logout","expirationDate","Date","getUserCredentials","checkAuthTimeout","getTime","loginUserSaga","authStart","authData","email","password","url","res","post","setItem","data","error","authFail","response","signupUserSaga","config","headers","username","password1","password2","body","JSON","stringify","authSuccess","getUserCredentialsSaga","get","userData","pk","first_name","last_name"],"mappings":"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","sourcesContent":["import { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nimport axios from \"../../axios/auth\";\n\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logoutSuccess());\n}\n\nexport function* logoutSaga() {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n  yield put(actions.logoutSuccess());\n}\n\nexport function* authCheckState() {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(\n      localStorage.getItem(\"expirationDate\")\n    );\n    if (expirationDate <= new Date()) {\n      put(actions.logout());\n    } else {\n      // const userId = localStorage.getItem(\"userId\");\n      // yield put(actions.authSuccess(token, userId));\n      yield put(actions.getUserCredentials(token));\n      yield put(\n        actions.checkAuthTimeout(\n          (expirationDate.getTime() - new Date().getTime()) / 1000\n        )\n      );\n    }\n  }\n}\n\nexport function* loginUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    email: action.email,\n    password: action.password,\n  };\n  let url = \"login\";\n  try {\n    const res = yield axios.post(url, authData);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.getUserCredentials(res.data.token));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\n\nexport function* signupUserSaga(action) {\n  yield put(actions.authStart());\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const username = action.username;\n  const email = action.email;\n  const password1 = action.password1;\n  const password2 = action.password2;\n  // Request Body\n  const body = JSON.stringify({ username, email, password1, password2 });\n  let url = \"registration/\";\n  try {\n    const res = yield axios.post(url, body, config);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.authSuccess(res.data.token, action.email));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\n\nexport function* getUserCredentialsSaga(action) {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  // If token, add to headers config\n  if (action.token) {\n    config.headers[\"Authorization\"] = `Token ${action.token}`;\n  } else {\n    yield put(actions.authFail({}));\n  }\n\n  try {\n    const res = yield axios.get(\"me\", config);\n\n    const userData = {\n      pk: res.data.pk,\n      username: res.data.username,\n      email: res.data.email,\n      first_name: res.data.first_name,\n      last_name: res.data.last_name,\n    };\n\n    yield put(actions.authSuccess(action.token, userData));\n  } catch (error) {\n    yield put(actions.authFail(error));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}