{"ast":null,"code":"var _jsxFileName = \"/Users/luispreciado/Documents/CSProjects/WebDevelopment/poke-api/gui/src/containers/Auth/Auth.js\";\nimport React from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport { Redirect } from 'react-router-dom';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { updateObject, checkValidity } from '../../shared/utility';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nclass Auth extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Email'\n          },\n          value: '',\n          label: 'Email',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Your Password'\n          },\n          value: '',\n          label: 'Password',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      IsSignup: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = updateObject(this.state.controls, {\n        [controlName]: updateObject(this.state.controls[controlName], {\n          value: event.target.value,\n          valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      const email = this.state.controls.email.value;\n      const password = this.state.controls.password.value;\n      onLogin(email, password);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.props.history.push('/signup');\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    console.log(this.props.auth);\n    const formElementsArray = []; //Convert State to an Array to loop Thru\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map((formElement, key) => {\n      return React.createElement(Input, {\n        key: formElement.id,\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        value: formElement.config.value,\n        touched: formElement.config.touched,\n        label: formElement.config.label,\n        changed: event => this.inputChangedHandler(event, formElement.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    });\n\n    if (this.props.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      });\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Incorrect Credentials\");\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = React.createElement(Redirect, {\n        to: this.props.authRedirectPath,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.Auth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, authRedirect, errorMessage, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \" SUBMIT \"), React.createElement(Button, {\n      btnType: \"Danger\",\n      clicked: this.switchAuthModeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \" \", this.state.isSignup ? 'SIGN IN' : 'SIGNUP', \" \")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onLogin: (email, password) => {\n      dispatch(actions.login(email, password));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/luispreciado/Documents/CSProjects/WebDevelopment/poke-api/gui/src/containers/Auth/Auth.js"],"names":["React","Input","Button","classes","Redirect","Spinner","updateObject","checkValidity","connect","actions","Auth","Component","state","controls","email","elementType","elementConfig","type","placeholder","value","label","validation","required","isEmail","valid","touched","password","minLength","IsSignup","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","onLogin","switchAuthModeHandler","props","history","push","componentDidMount","render","console","log","auth","formElementsArray","key","id","config","form","map","formElement","loading","errorMessage","error","authRedirect","isAuthenticated","authRedirectPath","isSignup","mapStateToProps","mapDispatchToProps","dispatch","login"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport classes from './Auth.module.css'\nimport {Redirect} from 'react-router-dom'\nimport Spinner from '../../components/UI/Spinner/Spinner'\nimport { updateObject, checkValidity} from '../../shared/utility'\nimport { connect } from 'react-redux'\nimport * as actions from '../../store/actions/index'\n\nclass Auth extends React.Component{\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email'\n                },\n                value: '',\n                label: 'Email',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Your Password'\n                },\n                value: '',\n                label: 'Password',\n                validation: {\n                    required: true,\n                    minLength: 6,\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        IsSignup: true\n    }\n\n    componentDidMount(){\n    \n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName] : updateObject(this.state.controls[controlName], {\n                        value : event.target.value,\n                        valid : checkValidity(event.target.value, this.state.controls[controlName].validation),\n                        touched : true,\n                    })\n        })\n        this.setState({\n            controls: updatedControls\n        })\n    }\n\n    submitHandler = (event) =>{\n        event.preventDefault()\n        const email = this.state.controls.email.value\n        const password = this.state.controls.password.value\n        onLogin(email, password)\n    }\n\n    switchAuthModeHandler = () =>{\n        this.props.history.push('/signup')\n    }\n    \n    render(){\n        console.log(this.props.auth)\n        const formElementsArray= [] //Convert State to an Array to loop Thru\n        for(let key in this.state.controls){\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n       \n        \n        let form =  formElementsArray.map((formElement, key) =>{\n                    return <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        value={formElement.config.value} \n                        touched={formElement.config.touched}\n                        label={formElement.config.label}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n                })\n                \n         if(this.props.loading){\n            form = <Spinner/>\n        }\n\n        let errorMessage = null\n        if(this.props.error) {\n            errorMessage = ( \n                <p>Incorrect Credentials</p>\n            )\n        }\n        let authRedirect = null\n        if (this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\n        }\n        return(\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    { form }\n                    <Button btnType=\"Success\"> SUBMIT </Button>\n                    <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}> { this.state.isSignup ? 'SIGN IN' : 'SIGNUP' } </Button>\n                </form>\n                \n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        auth : state.auth\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogin: (email ,password) => { dispatch(actions.login(email, password))}\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)"]},"metadata":{},"sourceType":"module"}