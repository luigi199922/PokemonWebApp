{"ast":null,"code":"import { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nimport axios from \"../../axios/auth\";\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logoutSuccess());\n}\nexport function* logoutSaga() {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n  yield put(actions.logoutSuccess());\n}\nexport function* authCheckState() {\n  const token = localStorage.getItem(\"token\");\n\n  if (!token) {\n    put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(localStorage.getItem(\"expirationDate\"));\n\n    if (expirationDate <= new Date()) {\n      put(actions.logout());\n    } else {\n      const userId = localStorage.getItem(\"userId\"); // yield put(actions.authSuccess(token, userId));\n\n      yield put(actions.getUserCredentials(token));\n      yield put(actions.checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n    }\n  }\n}\nexport function* loginUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    username: \"\",\n    email: action.email,\n    password: action.password\n  };\n  let url = \"login/\";\n\n  try {\n    const res = yield axios.post(url, authData);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.key);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.getUserCredentials(res.data.key));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\nexport function* signupUserSaga(action) {\n  yield put(actions.authStart()); // Headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const username = action.username;\n  const email = action.email;\n  const password1 = action.password1;\n  const password2 = action.password2; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    email,\n    password1,\n    password2\n  });\n  console.log(config);\n  console.log(body);\n  let url = \"registration/\";\n\n  try {\n    const res = yield axios.post(url, body, config);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.key);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.authSuccess(res.data.key, action.email));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\nexport function* getUserCredentialsSaga(action) {\n  console.log(action.token); // Headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // If token, add to headers config\n\n  if (action.token) {\n    config.headers[\"Authorization\"] = `Token ${action.token}`;\n  } else {\n    yield put(actions.authFail({}));\n  }\n\n  console.log(config);\n\n  try {\n    const res = yield axios.get(\"user/\", config);\n    const userData = {\n      pk: res.data.pk,\n      username: res.data.username,\n      email: res.data.email,\n      first_name: res.data.first_name,\n      last_name: res.data.last_name\n    };\n    console.log(userData);\n    yield put(actions.authSuccess(action.token, userData));\n  } catch (error) {\n    yield put(actions.authFail(error));\n  }\n}","map":{"version":3,"sources":["/Users/luispreciado/Documents/CSProjects/WebDevelopment/poke-api/gui/src/store/saga/auth.js"],"names":["put","delay","actions","axios","checkAuthTimeoutSaga","action","expirationTime","logoutSuccess","logoutSaga","localStorage","removeItem","authCheckState","token","getItem","logout","expirationDate","Date","userId","getUserCredentials","checkAuthTimeout","getTime","loginUserSaga","authStart","authData","username","email","password","url","res","post","setItem","data","key","error","authFail","response","signupUserSaga","config","headers","password1","password2","body","JSON","stringify","console","log","authSuccess","getUserCredentialsSaga","get","userData","pk","first_name","last_name"],"mappings":"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","sourcesContent":["import { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nimport axios from \"../../axios/auth\";\n\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logoutSuccess());\n}\n\nexport function* logoutSaga() {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n  yield put(actions.logoutSuccess());\n}\n\nexport function* authCheckState() {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(\n      localStorage.getItem(\"expirationDate\")\n    );\n    if (expirationDate <= new Date()) {\n      put(actions.logout());\n    } else {\n      const userId = localStorage.getItem(\"userId\");\n      // yield put(actions.authSuccess(token, userId));\n      yield put(actions.getUserCredentials(token))\n      yield put(\n        actions.checkAuthTimeout(\n          (expirationDate.getTime() - new Date().getTime()) / 1000\n        )\n      );\n    }\n  }\n}\n\nexport function* loginUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    username: \"\",\n    email: action.email,\n    password: action.password,\n  };\n  let url = \"login/\";\n  try {\n    const res = yield axios.post(url, authData);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\n    localStorage.setItem(\"token\", res.data.key);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.getUserCredentials(res.data.key));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\n\nexport function* signupUserSaga(action) {\n  yield put(actions.authStart());\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const username = action.username;\n  const email = action.email;\n  const password1 = action.password1;\n  const password2 = action.password2;\n  // Request Body\n  const body = JSON.stringify({ username, email, password1, password2 });\n  console.log(config);\n  console.log(body);\n  let url = \"registration/\";\n  try {\n    const res = yield axios.post(url, body, config);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.key);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.authSuccess(res.data.key, action.email));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\n\nexport function* getUserCredentialsSaga(action) {\n  console.log(action.token);\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \n    },\n  };\n  // If token, add to headers config\n  if (action.token) {\n    config.headers[\"Authorization\"] = `Token ${action.token}`;\n  }else{\n    yield put(actions.authFail({}))\n  }\n  console.log(config)\n\n  try {\n    const res = yield axios.get(\"user/\", config);\n\n    const userData = {\n        pk : res.data.pk,\n        username: res.data.username,\n        email: res.data.email,\n        first_name: res.data.first_name,\n        last_name: res.data.last_name   \n    }\n    console.log(userData);\n\n    yield put(actions.authSuccess(action.token, userData));\n  } catch (error) {\n    yield put(actions.authFail(error));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}