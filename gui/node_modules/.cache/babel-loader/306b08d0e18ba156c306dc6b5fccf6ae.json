{"ast":null,"code":"import axios from \"../../axios/auth\";\nimport * as actionTypes from \"./actionTypes\";\nexport const signupStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const signupSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\nexport const signup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    authData = {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    };\n    let url = \"registration/\";\n    axios.post(url, authData).then(res => {\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem(\"token\", res.data.key);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      localStorage.setItem(\"userId\", email);\n      dispatch(authSuccess(res.data.key, email));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err.response.data));\n    });\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\nexport const login = (email, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    authData = {\n      username: \"\",\n      email: email,\n      password: password\n    };\n    let url = \"login/\";\n    axios.post(url, authData).then(res => {\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem(\"token\", res.data.key);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      localStorage.setItem(\"userId\", email);\n      dispatch(authSuccess(res.data.key, email));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err.response.data));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/luispreciado/Documents/CSProjects/WebDevelopment/poke-api/gui/src/store/actions/auth.js"],"names":["axios","actionTypes","signupStart","type","AUTH_START","signupSuccess","token","userId","AUTH_SUCCESS","signup","username","email","password1","password2","dispatch","authStart","authData","url","post","then","res","expirationDate","Date","getTime","localStorage","setItem","data","key","authSuccess","checkAuthTimeout","catch","err","authFail","response","login","password"],"mappings":"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","sourcesContent":["import axios from \"../../axios/auth\";\nimport * as actionTypes from \"./actionTypes\";\n\nexport const signupStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n\nexport const signupSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\n\nexport const signup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    authData = {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    };\n    let url = \"registration/\";\n    axios\n      .post(url, authData)\n      .then(res => {\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\n        localStorage.setItem(\"token\", res.data.key);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        localStorage.setItem(\"userId\", email);\n        dispatch(authSuccess(res.data.key, email));\n        dispatch(checkAuthTimeout(3600));\n      })\n      .catch(err => {\n        dispatch(authFail(err.response.data));\n      });\n  };\n};\n\nexport const authSuccess = (token, userId) => {\n    return {\n      type: actionTypes.AUTH_SUCCESS,\n      token: token,\n      userId: userId\n    };\n  };\n\nexport const login = ( email, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    authData = {\n      username: \"\",\n      email: email,\n      password: password,\n    };\n    let url = \"login/\";\n    axios\n      .post(url, authData)\n      .then(res => {\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\n        localStorage.setItem(\"token\", res.data.key);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        localStorage.setItem(\"userId\", email);\n        dispatch(authSuccess(res.data.key, email));\n        dispatch(checkAuthTimeout(3600));\n      })\n      .catch(err => {\n        dispatch(authFail(err.response.data));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}