{"ast":null,"code":"import { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nimport axios from \"../../axios/auth\";\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logoutSuccess());\n}\nexport function* logoutSaga() {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\"); // const url = \"logout/\";\n  // try {\n  //   const res = yield axios.post(url);\n\n  yield put(actions.logoutSuccess()); // } catch (error) {\n  //   yield put(actions.authFail(error.response.data));\n  // }\n}\nexport function* authCheckState() {\n  const token = localStorage.getItem(\"token\");\n\n  if (!token) {\n    yield put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(localStorage.getItem(\"expirationDate\"));\n\n    if (expirationDate <= new Date()) {\n      yield put(actions.logout());\n    } else {\n      const userId = localStorage.getItem(\"userId\");\n      yield put(actions.authSuccess(token, userId));\n      yield put(actions.checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n    }\n  }\n}\nexport function* loginUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    username: \"\",\n    email: action.email,\n    password: action.password\n  };\n  let url = \"login/\";\n\n  try {\n    const res = yield axios.post(url, authData);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.key);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email); // dispatch(getUserCredetials(authData))\n\n    yield put(actions.authSuccess(res.data.key, action.email));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}","map":{"version":3,"sources":["/Users/luispreciado/Documents/CSProjects/WebDevelopment/poke-api/gui/src/store/saga/auth.js"],"names":["put","delay","actions","axios","checkAuthTimeoutSaga","action","expirationTime","logoutSuccess","logoutSaga","localStorage","removeItem","authCheckState","token","getItem","logout","expirationDate","Date","userId","authSuccess","checkAuthTimeout","getTime","loginUserSaga","authStart","authData","username","email","password","url","res","post","setItem","data","key","error","authFail","response"],"mappings":"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","sourcesContent":["import { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nimport axios from \"../../axios/auth\";\n\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000)\n  yield put(actions.logoutSuccess());\n}\n\nexport function* logoutSaga() {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n  // const url = \"logout/\";\n  // try {\n  //   const res = yield axios.post(url);\n    yield put(actions.logoutSuccess());\n  // } catch (error) {\n  //   yield put(actions.authFail(error.response.data));\n  // }\n}\n\nexport function* authCheckState() {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    yield put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(localStorage.getItem(\"expirationDate\"));\n    if (expirationDate <= new Date()) {\n      yield put(actions.logout());\n    } else {\n      const userId = localStorage.getItem(\"userId\");\n      yield put(actions.authSuccess(token, userId));\n      yield put(\n        actions.checkAuthTimeout(\n          (expirationDate.getTime() - new Date().getTime()) / 1000\n        )\n      );\n    }\n  }\n}\n\nexport function* loginUserSaga(action){\n    yield put(actions.authStart());\n    const authData = {\n      username: \"\",\n      email: action.email,\n      password: action.password\n    };\n    let url = \"login/\";\n    try{\n      const res = yield axios.post(url, authData)\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\n        localStorage.setItem(\"token\", res.data.key);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        localStorage.setItem(\"userId\", action.email);\n        // dispatch(getUserCredetials(authData))\n        yield put(actions.authSuccess(res.data.key, action.email));\n        yield put(actions.checkAuthTimeout(3600));\n    }catch(error){\n      yield put(actions.authFail(error.response.data));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}