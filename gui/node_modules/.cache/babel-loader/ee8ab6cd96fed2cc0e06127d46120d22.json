{"ast":null,"code":"import { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nimport axios from \"../../axios/auth\";\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logoutSuccess());\n}\nexport function* logoutSaga() {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n  const url = \"logout\";\n\n  try {\n    yield axios.post(url);\n    yield put(actions.logoutSuccess());\n  } catch (e) {\n    console.log(\"Unable to Log Out\");\n  }\n}\nexport function* authCheckState() {\n  const token = localStorage.getItem(\"token\");\n\n  if (!token) {\n    put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(localStorage.getItem(\"expirationDate\"));\n\n    if (expirationDate <= new Date()) {\n      put(actions.logout());\n    } else {\n      // const userId = localStorage.getItem(\"userId\");\n      // yield put(actions.authSuccess(token, userId));\n      yield put(actions.getUserCredentials(token));\n      yield put(actions.checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n    }\n  }\n}\nexport function* loginUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    email: action.email,\n    password: action.password\n  };\n  let url = \"login\";\n\n  try {\n    const res = yield axios.post(url, authData);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.getUserCredentials(res.data.token));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\nexport function* signupUserSaga(action) {\n  yield put(actions.authStart()); // Headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const username = action.username;\n  const email = action.email;\n  const password1 = action.password1;\n  const password2 = action.password2; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    email,\n    password1,\n    password2\n  });\n  let url = \"registration/\";\n\n  try {\n    const res = yield axios.post(url, body, config);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.authSuccess(res.data.token, action.email));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\nexport function* getUserCredentialsSaga(action) {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // If token, add to headers config\n\n  if (action.token) {\n    config.headers[\"Authorization\"] = `Bearer ${action.token}`;\n  } else {\n    yield put(actions.authFail({}));\n  }\n\n  try {\n    const res = yield axios.get(\"me\", config);\n    const userData = {\n      pk: res.data._id,\n      username: res.data.username,\n      email: res.data.email,\n      first_name: \"\",\n      last_name: \"\"\n    };\n    yield put(actions.authSuccess(action.token, userData));\n  } catch (error) {\n    yield put(actions.authFail(error));\n  }\n}","map":{"version":3,"sources":["/Users/luispreciado/Documents/CSProjects/WebDevelopment/poke-api/gui/src/store/saga/auth.js"],"names":["put","delay","actions","axios","checkAuthTimeoutSaga","action","expirationTime","logoutSuccess","logoutSaga","localStorage","removeItem","url","post","e","console","log","authCheckState","token","getItem","logout","expirationDate","Date","getUserCredentials","checkAuthTimeout","getTime","loginUserSaga","authStart","authData","email","password","res","setItem","data","error","authFail","response","signupUserSaga","config","headers","username","password1","password2","body","JSON","stringify","authSuccess","getUserCredentialsSaga","get","userData","pk","_id","first_name","last_name"],"mappings":"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","sourcesContent":["import { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nimport axios from \"../../axios/auth\";\n\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logoutSuccess());\n}\n\nexport function* logoutSaga() {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n  const url = \"logout\"\n  try{\n    yield axios.post(url);\n    yield put(actions.logoutSuccess());\n  }catch(e){\n    console.log(\"Unable to Log Out\")\n  }\n  \n}\n\nexport function* authCheckState() {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(\n      localStorage.getItem(\"expirationDate\")\n    );\n    if (expirationDate <= new Date()) {\n      put(actions.logout());\n    } else {\n      // const userId = localStorage.getItem(\"userId\");\n      // yield put(actions.authSuccess(token, userId));\n      yield put(actions.getUserCredentials(token));\n      yield put(\n        actions.checkAuthTimeout(\n          (expirationDate.getTime() - new Date().getTime()) / 1000\n        )\n      );\n    }\n  }\n}\n\nexport function* loginUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    email: action.email,\n    password: action.password,\n  };\n  let url = \"login\";\n  try {\n    const res = yield axios.post(url, authData);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.getUserCredentials(res.data.token));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\n\nexport function* signupUserSaga(action) {\n  yield put(actions.authStart());\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  const username = action.username;\n  const email = action.email;\n  const password1 = action.password1;\n  const password2 = action.password2;\n  // Request Body\n  const body = JSON.stringify({ username, email, password1, password2 });\n  let url = \"registration/\";\n  try {\n    const res = yield axios.post(url, body, config);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.authSuccess(res.data.token, action.email));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\n\nexport function* getUserCredentialsSaga(action) {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  // If token, add to headers config\n  if (action.token) {\n    config.headers[\"Authorization\"] = `Bearer ${action.token}`;\n  } else {\n    yield put(actions.authFail({}));\n  }\n\n  try {\n    const res = yield axios.get(\"me\", config);\n\n    const userData = {\n      pk: res.data._id,\n      username: res.data.username,\n      email: res.data.email,\n      first_name: \"\",\n      last_name: \"\",\n    };\n\n    yield put(actions.authSuccess(action.token, userData));\n  } catch (error) {\n    yield put(actions.authFail(error));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}