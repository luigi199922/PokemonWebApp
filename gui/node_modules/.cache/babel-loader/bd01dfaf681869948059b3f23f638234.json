{"ast":null,"code":"import * as actions from './actionTypes';\nimport axios from '../../axios/axios';\nexport const fetchPokemon = (offset, limit) => {\n  return dispatch => {\n    axios.get('/?offset=' + offset + '&limit=' + limit).then(response => {\n      //maybe get the page number and add it to the url\n      dispatch(fetchPokemonSuccess(response.data.results, offset, limit));\n    }).catch(error => {\n      console.log(error);\n      dispatch(fetchPokemonFailed());\n    });\n  };\n};\nexport const fetchPokemonFailed = () => {\n  return {\n    type: actions.FETCH_POKEMON_FAILED\n  };\n};\nexport const fetchPokemonSuccess = (pokemonArray, lowerBound, upperBound) => {\n  return {\n    type: actions.FETCH_POKEMON_SUCCESS,\n    pokemon: pokemonArray,\n    lower: lowerBound,\n    upper: upperBound\n  };\n};\nexport const nextPokemonPage = (offset, limit) => {\n  const newOffset = offset + 28;\n  return fetchPokemon(newOffset, limit);\n};\nexport const previousPokemonPage = (offset, limit) => {\n  const newOffset = offset - 28;\n  return fetchPokemon(newOffset, limit);\n};\nexport const fetchPokemonById = (offset, limit) => {\n  return dispatch => {\n    axios.get('https://pokeapi.co/api/v2/pokemon/' + this.props.match.params.id).then(res => {\n      const types = res.data.types.map(type => type.type.name);\n      this.setState({\n        abilities: res.data.abilities,\n        base_experience: res.data.base_experience,\n        forms: res.data.forms,\n        height: res.data.height / 10,\n        id: res.data.id,\n        weight: res.data.weight / 10,\n        types: types,\n        name: res.data.name,\n        stats: res.data.stats,\n        imageURL: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + res.data.id + \".png\"\n      });\n      console.log(this.state);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/luispreciado/Documents/CSProjects/WebDevelopment/poke-api/gui/src/store/actions/pokemon.js"],"names":["actions","axios","fetchPokemon","offset","limit","dispatch","get","then","response","fetchPokemonSuccess","data","results","catch","error","console","log","fetchPokemonFailed","type","FETCH_POKEMON_FAILED","pokemonArray","lowerBound","upperBound","FETCH_POKEMON_SUCCESS","pokemon","lower","upper","nextPokemonPage","newOffset","previousPokemonPage","fetchPokemonById","props","match","params","id","res","types","map","name","setState","abilities","base_experience","forms","height","weight","stats","imageURL","state"],"mappings":"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","sourcesContent":["import * as actions from './actionTypes'\nimport axios from '../../axios/axios'\n\nexport const fetchPokemon = (offset ,limit) => {\n    return (dispatch) => {\n        axios.get('/?offset='+offset+'&limit='+limit).then(response=>{ //maybe get the page number and add it to the url\n            dispatch(fetchPokemonSuccess(response.data.results, offset, limit))\n        }).catch(error => {\n            console.log(error)\n            dispatch(fetchPokemonFailed())\n        })\n    }\n}\nexport const fetchPokemonFailed = () => {\n    return {\n        type :  actions.FETCH_POKEMON_FAILED\n    }\n}\nexport const fetchPokemonSuccess = (pokemonArray, lowerBound, upperBound) => {\n    return {\n        type : actions.FETCH_POKEMON_SUCCESS,\n        pokemon : pokemonArray,\n        lower : lowerBound,\n        upper : upperBound,\n    }\n}\n\nexport const nextPokemonPage = (offset, limit) => {\n    const newOffset = offset + 28;\n    return fetchPokemon(newOffset, limit)\n}\n\nexport const previousPokemonPage = (offset, limit) => {\n    const newOffset = offset - 28;\n    return fetchPokemon(newOffset, limit)\n}\n\nexport const fetchPokemonById = (offset ,limit) => {\n    return (dispatch) => {\n        axios.get('https://pokeapi.co/api/v2/pokemon/' + this.props.match.params.id).then(res=>{    \n            const types = res.data.types.map(type=> type.type.name)\n            this.setState({\n                abilities: res.data.abilities,\n                base_experience: res.data.base_experience,\n                forms: res.data.forms,\n                height: (res.data.height)/10,\n                id: res.data.id,\n                weight: (res.data.weight/10),\n                types: types,\n                name: res.data.name,\n                stats: res.data.stats,\n                imageURL: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + res.data.id +   \".png\"   \n            })\n            console.log(this.state)\n        }).catch(error =>{\n            console.log(error)\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}