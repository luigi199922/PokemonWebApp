{"ast":null,"code":"var _jsxFileName = \"/Users/luispreciado/Documents/CSProjects/WebDevelopment/poke-api/gui/src/containers/Auth/Signup/Signup.js\";\nimport React from 'react';\nimport Input from '../../../components/UI/Input/Input';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from '../Auth.module.css';\nimport { Redirect } from 'react-router-dom';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport { updateObject, checkValidity } from '../../../shared/utility';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../store/actions/index';\n\nclass Auth extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Email'\n          },\n          value: '',\n          label: 'Email',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        username: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Desired Username'\n          },\n          value: '',\n          label: 'Username',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password1: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Your Password'\n          },\n          value: '',\n          label: 'Password',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        },\n        password2: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Confirm Password'\n          },\n          value: '',\n          label: 'Confirm Password',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      IsSignup: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = updateObject(this.state.controls, {\n        [controlName]: updateObject(this.state.controls[controlName], {\n          value: event.target.value,\n          valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      console.log(\"SUBMIT\");\n      const email = this.state.controls.email.value;\n      const username = this.state.controls.username.value;\n      const password1 = this.state.controls.password1.value;\n      const password2 = this.state.controls.password2.value;\n      this.props.onSignup(username, email, password1, password2);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.props.history.push('/login');\n    };\n\n    this.handleErrorHandler = error => {\n      console.log(Object.keys(error));\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.auth.token != null) {\n      console.log(\"ONSETAUTHREDIRECT\");\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  render() {\n    const formElementsArray = []; //Convert State to an Array to loop Thru\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map((formElement, key) => {\n      return React.createElement(Input, {\n        key: formElement.id,\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        value: formElement.config.value,\n        touched: formElement.config.touched,\n        label: formElement.config.label,\n        changed: event => this.inputChangedHandler(event, formElement.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      });\n    });\n\n    if (this.props.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      });\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = React.createElement(Redirect, {\n        to: this.props.authRedirectPath,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      });\n    }\n\n    let errorMessage = [];\n\n    if (this.props.auth.error) {\n      this.handleErrorHandler(this.props.auth.error);\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.Auth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, authRedirect, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, errorMessage), React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      btnType: \"Success\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \" SUBMIT \"), React.createElement(Button, {\n      btnType: \"Danger\",\n      clicked: this.switchAuthModeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \" LOGIN \")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.auth\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSignup: (username, email, password1, password2) => {\n      dispatch(actions.signup(username, email, password1, password2));\n    },\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/luispreciado/Documents/CSProjects/WebDevelopment/poke-api/gui/src/containers/Auth/Signup/Signup.js"],"names":["React","Input","Button","classes","Redirect","Spinner","updateObject","checkValidity","connect","actions","Auth","Component","state","controls","email","elementType","elementConfig","type","placeholder","value","label","validation","required","isEmail","valid","touched","username","password1","minLength","password2","IsSignup","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","console","log","props","onSignup","switchAuthModeHandler","history","push","handleErrorHandler","error","Object","keys","componentDidMount","auth","token","onSetAuthRedirectPath","render","formElementsArray","key","id","config","form","map","formElement","loading","authRedirect","isAuthenticated","authRedirectPath","errorMessage","mapStateToProps","mapDispatchToProps","dispatch","signup","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Input from '../../../components/UI/Input/Input'\nimport Button from '../../../components/UI/Button/Button'\nimport classes from '../Auth.module.css'\nimport {Redirect} from 'react-router-dom'\nimport Spinner from '../../../components/UI/Spinner/Spinner'\nimport { updateObject, checkValidity} from '../../../shared/utility'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../store/actions/index'\n\nclass Auth extends React.Component{\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email'\n                },\n                value: '',\n                label: 'Email',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false\n            },\n            username: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Desired Username'\n                },\n                value: '',\n                label: 'Username',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false\n            },\n            password1: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Your Password'\n                },\n                value: '',\n                label: 'Password',\n                validation: {\n                    required: true,\n                    minLength: 6,\n                },\n                valid: false,\n                touched: false\n            },\n            password2: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Confirm Password'\n                },\n                value: '',\n                label: 'Confirm Password',\n                validation: {\n                    required: true,\n                    minLength: 6,\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        IsSignup: true\n    }\n\n    componentDidMount(){\n        if(this.props.auth.token != null){\n            console.log(\"ONSETAUTHREDIRECT\")\n            this.props.onSetAuthRedirectPath()\n        } \n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName] : updateObject(this.state.controls[controlName], {\n                        value : event.target.value,\n                        valid : checkValidity(event.target.value, this.state.controls[controlName].validation),\n                        touched : true,\n                    })\n        })\n        this.setState({\n            controls: updatedControls\n        })\n    }\n\n    submitHandler = (event) =>{\n        event.preventDefault()\n        console.log(\"SUBMIT\")\n        const email = this.state.controls.email.value\n        const username = this.state.controls.username.value\n        const password1 = this.state.controls.password1.value\n        const password2 = this.state.controls.password2.value\n        this.props.onSignup(username, email, password1, password2)\n\n    }\n\n    switchAuthModeHandler = () =>{\n        this.props.history.push('/login')\n    }\n\n    handleErrorHandler = (error) => {\n        console.log(Object.keys(error))\n    }\n    \n    render(){\n\n        const formElementsArray= [] //Convert State to an Array to loop Thru\n        for(let key in this.state.controls){\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n       \n        \n        let form =  formElementsArray.map((formElement, key) =>{\n                    return <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        value={formElement.config.value} \n                        touched={formElement.config.touched}\n                        label={formElement.config.label}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\n                })\n                \n         if(this.props.loading){\n            form = <Spinner/>\n        }\n\n        \n        let authRedirect = null\n        if (this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\n        }\n        let errorMessage = []\n        if(this.props.auth.error){\n            this.handleErrorHandler(this.props.auth.error)\n        }\n        return(\n            <div className={classes.Auth}>\n                {authRedirect}\n                <p>{errorMessage}</p>\n                <form onSubmit={this.submitHandler}>\n                    { form }\n                    <Button btnType=\"Success\" type=\"submit\"> SUBMIT </Button>\n                    <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}> LOGIN </Button>\n                </form>\n                \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        auth : state.auth\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSignup: (username, email, password1, password2) => { dispatch(actions.signup(username, email, password1, password2))},\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)"]},"metadata":{},"sourceType":"module"}