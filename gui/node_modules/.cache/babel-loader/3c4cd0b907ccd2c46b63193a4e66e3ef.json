{"ast":null,"code":"import axios from \"../../axios/auth\";\nimport * as actionTypes from \"./actionTypes\";\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const signup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    };\n    let url = \"registration/\";\n    axios.post(url, authData).then(res => {\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem(\"token\", res.data.key);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      localStorage.setItem(\"userId\", email);\n      dispatch(authSuccess(res.data.key, email));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err.response.data));\n    });\n  };\n};\nexport const login = (email, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      username: \"\",\n      email: email,\n      password: password\n    };\n    let url = \"login/\";\n    axios.post(url, authData).then(res => {\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem(\"token\", res.data.key);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      localStorage.setItem(\"userId\", email);\n      dispatch(authSuccess(res.data.key, email));\n      dispatch(checkAuthTimeout(3600));\n    }).catch(err => {\n      dispatch(authFail(err.response.data));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/luispreciado/Documents/CSProjects/WebDevelopment/poke-api/gui/src/store/actions/auth.js"],"names":["axios","actionTypes","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","checkAuthTimeout","expirationTime","dispatch","setTimeout","logout","signup","username","email","password1","password2","authData","url","post","then","res","expirationDate","Date","getTime","localStorage","setItem","data","key","catch","err","authFail","response","login","password"],"mappings":"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","sourcesContent":["import axios from \"../../axios/auth\";\nimport * as actionTypes from \"./actionTypes\";\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\n\nexport const checkAuthTimeout = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout())\n        }, expirationTime * 1000)\n    }\n}\n\nexport const signup = (username, email, password1, password2) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      username: username,\n      email: email,\n      password1: password1,\n      password2: password2\n    };\n    let url = \"registration/\";\n    axios\n      .post(url, authData)\n      .then(res => {\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\n        localStorage.setItem(\"token\", res.data.key);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        localStorage.setItem(\"userId\", email);\n        dispatch(authSuccess(res.data.key, email));\n        dispatch(checkAuthTimeout(3600));\n      })\n      .catch(err => {\n        dispatch(authFail(err.response.data));\n      });\n  };\n};\n\nexport const login = ( email, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      username: \"\",\n      email: email,\n      password: password,\n    };\n    let url = \"login/\";\n    axios\n      .post(url, authData)\n      .then(res => {\n        const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\n        localStorage.setItem(\"token\", res.data.key);\n        localStorage.setItem(\"expirationDate\", expirationDate);\n        localStorage.setItem(\"userId\", email);\n        dispatch(authSuccess(res.data.key, email));\n        dispatch(checkAuthTimeout(3600));\n      })\n      .catch(err => {\n        dispatch(authFail(err.response.data));\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}