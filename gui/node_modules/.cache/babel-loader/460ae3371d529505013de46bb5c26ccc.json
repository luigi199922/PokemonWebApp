{"ast":null,"code":"import { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nimport axios from \"../../axios/auth\";\nimport { createHTTPHeaders } from \"../../shared/utility\";\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logoutSuccess());\n}\nexport function* logoutSaga(action) {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n\n  if (!action.token) {\n    yield put(actions.authFail({}));\n  }\n\n  const config = createHTTPHeaders(action.token);\n  const url = \"logout\";\n\n  try {\n    yield axios.post(url, {}, config);\n    yield put(actions.logoutSuccess());\n  } catch (e) {\n    console.log(\"Unable to Log Out\");\n  }\n}\nexport function* authCheckState() {\n  const token = localStorage.getItem(\"token\");\n\n  if (!token) {\n    put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(localStorage.getItem(\"expirationDate\"));\n\n    if (expirationDate <= new Date()) {\n      put(actions.logout());\n    } else {\n      yield put(actions.getUserCredentials(token));\n      yield put(actions.checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n    }\n  }\n}\nexport function* loginUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    email: action.email,\n    password: action.password\n  };\n  let url = \"login\";\n\n  try {\n    const res = yield axios.post(url, authData);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    const userData = {\n      pk: res.data.user._id,\n      username: res.data.user.username,\n      email: res.data.user.email,\n      first_name: \"\",\n      last_name: \"\"\n    };\n    yield put(actions.authSuccess(action.token, userData));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\nexport function* signupUserSaga(action) {\n  yield put(actions.authStart());\n  const signupData = {\n    email: action.email,\n    password: action.password1,\n    username: action.username\n  };\n  let url = \"create\";\n\n  try {\n    const res = yield axios.post(url, signupData);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.authSuccess(res.data.token, action.email));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\nexport function* getUserCredentialsSaga(action) {\n  if (!action.token) {\n    yield put(actions.authFail({}));\n  }\n\n  const config = createHTTPHeaders(action.token);\n\n  try {\n    const res = yield axios.get(\"me\", config);\n    const userData = {\n      pk: res.data._id,\n      username: res.data.username,\n      email: res.data.email,\n      first_name: \"\",\n      last_name: \"\"\n    };\n    yield put(actions.authSuccess(action.token, userData));\n  } catch (error) {\n    yield put(actions.authFail(error));\n  }\n}","map":{"version":3,"sources":["/Users/luispreciado/Documents/CSProjects/WebDevelopment/poke-api/gui/src/store/saga/auth.js"],"names":["put","delay","actions","axios","createHTTPHeaders","checkAuthTimeoutSaga","action","expirationTime","logoutSuccess","logoutSaga","localStorage","removeItem","token","authFail","config","url","post","e","console","log","authCheckState","getItem","logout","expirationDate","Date","getUserCredentials","checkAuthTimeout","getTime","loginUserSaga","authStart","authData","email","password","res","setItem","data","userData","pk","user","_id","username","first_name","last_name","authSuccess","error","response","signupUserSaga","signupData","password1","getUserCredentialsSaga","get"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,QAA2B,oBAA3B;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,SAAQC,iBAAR,QAAgC,sBAAhC;AAEA,OAAO,UAAUC,oBAAV,CAA+BC,MAA/B,EAAuC;AAC5C,QAAML,KAAK,CAACK,MAAM,CAACC,cAAP,GAAwB,IAAzB,CAAX;AACA,QAAMP,GAAG,CAACE,OAAO,CAACM,aAAR,EAAD,CAAT;AACD;AAED,OAAO,UAAUC,UAAV,CAAqBH,MAArB,EAA6B;AAClCI,EAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAD,EAAAA,YAAY,CAACC,UAAb,CAAwB,gBAAxB;AACAD,EAAAA,YAAY,CAACC,UAAb,CAAwB,QAAxB;;AACA,MAAI,CAACL,MAAM,CAACM,KAAZ,EAAmB;AACjB,UAAMZ,GAAG,CAACE,OAAO,CAACW,QAAR,CAAiB,EAAjB,CAAD,CAAT;AACD;;AACD,QAAMC,MAAM,GAAGV,iBAAiB,CAACE,MAAM,CAACM,KAAR,CAAhC;AAEA,QAAMG,GAAG,GAAG,QAAZ;;AACA,MAAI;AACF,UAAMZ,KAAK,CAACa,IAAN,CAAWD,GAAX,EAAe,EAAf,EAAmBD,MAAnB,CAAN;AACA,UAAMd,GAAG,CAACE,OAAO,CAACM,aAAR,EAAD,CAAT;AACD,GAHD,CAGE,OAAOS,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD;AACF;AAED,OAAO,UAAUC,cAAV,GAA2B;AAChC,QAAMR,KAAK,GAAGF,YAAY,CAACW,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAI,CAACT,KAAL,EAAY;AACVZ,IAAAA,GAAG,CAACE,OAAO,CAACoB,MAAR,EAAD,CAAH;AACD,GAFD,MAEO;AACL,UAAMC,cAAc,GAAG,MAAM,IAAIC,IAAJ,CAC3Bd,YAAY,CAACW,OAAb,CAAqB,gBAArB,CAD2B,CAA7B;;AAGA,QAAIE,cAAc,IAAI,IAAIC,IAAJ,EAAtB,EAAkC;AAChCxB,MAAAA,GAAG,CAACE,OAAO,CAACoB,MAAR,EAAD,CAAH;AACD,KAFD,MAEO;AACL,YAAMtB,GAAG,CAACE,OAAO,CAACuB,kBAAR,CAA2Bb,KAA3B,CAAD,CAAT;AACA,YAAMZ,GAAG,CACPE,OAAO,CAACwB,gBAAR,CACE,CAACH,cAAc,CAACI,OAAf,KAA2B,IAAIH,IAAJ,GAAWG,OAAX,EAA5B,IAAoD,IADtD,CADO,CAAT;AAKD;AACF;AACF;AAED,OAAO,UAAUC,aAAV,CAAwBtB,MAAxB,EAAgC;AACrC,QAAMN,GAAG,CAACE,OAAO,CAAC2B,SAAR,EAAD,CAAT;AACA,QAAMC,QAAQ,GAAG;AACfC,IAAAA,KAAK,EAAEzB,MAAM,CAACyB,KADC;AAEfC,IAAAA,QAAQ,EAAE1B,MAAM,CAAC0B;AAFF,GAAjB;AAIA,MAAIjB,GAAG,GAAG,OAAV;;AACA,MAAI;AACF,UAAMkB,GAAG,GAAG,MAAM9B,KAAK,CAACa,IAAN,CAAWD,GAAX,EAAgBe,QAAhB,CAAlB;AACA,UAAMP,cAAc,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWG,OAAX,KAAuB,OAAO,IAAvC,CAAvB;AAEAjB,IAAAA,YAAY,CAACwB,OAAb,CAAqB,OAArB,EAA8BD,GAAG,CAACE,IAAJ,CAASvB,KAAvC;AACAF,IAAAA,YAAY,CAACwB,OAAb,CAAqB,gBAArB,EAAuCX,cAAvC;AACAb,IAAAA,YAAY,CAACwB,OAAb,CAAqB,QAArB,EAA+B5B,MAAM,CAACyB,KAAtC;AAEA,UAAMK,QAAQ,GAAG;AACfC,MAAAA,EAAE,EAAEJ,GAAG,CAACE,IAAJ,CAASG,IAAT,CAAcC,GADH;AAEfC,MAAAA,QAAQ,EAAEP,GAAG,CAACE,IAAJ,CAASG,IAAT,CAAcE,QAFT;AAGfT,MAAAA,KAAK,EAAEE,GAAG,CAACE,IAAJ,CAASG,IAAT,CAAcP,KAHN;AAIfU,MAAAA,UAAU,EAAE,EAJG;AAKfC,MAAAA,SAAS,EAAE;AALI,KAAjB;AAQA,UAAM1C,GAAG,CAACE,OAAO,CAACyC,WAAR,CAAoBrC,MAAM,CAACM,KAA3B,EAAkCwB,QAAlC,CAAD,CAAT;AACA,UAAMpC,GAAG,CAACE,OAAO,CAACwB,gBAAR,CAAyB,IAAzB,CAAD,CAAT;AACD,GAlBD,CAkBE,OAAOkB,KAAP,EAAc;AACd,UAAM5C,GAAG,CAACE,OAAO,CAACW,QAAR,CAAiB+B,KAAK,CAACC,QAAN,CAAeV,IAAhC,CAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUW,cAAV,CAAyBxC,MAAzB,EAAiC;AACtC,QAAMN,GAAG,CAACE,OAAO,CAAC2B,SAAR,EAAD,CAAT;AACA,QAAMkB,UAAU,GAAG;AACjBhB,IAAAA,KAAK,EAAGzB,MAAM,CAACyB,KADE;AAEjBC,IAAAA,QAAQ,EAAG1B,MAAM,CAAC0C,SAFD;AAGjBR,IAAAA,QAAQ,EAAGlC,MAAM,CAACkC;AAHD,GAAnB;AAKA,MAAIzB,GAAG,GAAG,QAAV;;AACA,MAAI;AACF,UAAMkB,GAAG,GAAG,MAAM9B,KAAK,CAACa,IAAN,CAAWD,GAAX,EAAgBgC,UAAhB,CAAlB;AACA,UAAMxB,cAAc,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWG,OAAX,KAAuB,OAAO,IAAvC,CAAvB;AACAjB,IAAAA,YAAY,CAACwB,OAAb,CAAqB,OAArB,EAA8BD,GAAG,CAACE,IAAJ,CAASvB,KAAvC;AACAF,IAAAA,YAAY,CAACwB,OAAb,CAAqB,gBAArB,EAAuCX,cAAvC;AACAb,IAAAA,YAAY,CAACwB,OAAb,CAAqB,QAArB,EAA+B5B,MAAM,CAACyB,KAAtC;AACA,UAAM/B,GAAG,CAACE,OAAO,CAACyC,WAAR,CAAoBV,GAAG,CAACE,IAAJ,CAASvB,KAA7B,EAAoCN,MAAM,CAACyB,KAA3C,CAAD,CAAT;AACA,UAAM/B,GAAG,CAACE,OAAO,CAACwB,gBAAR,CAAyB,IAAzB,CAAD,CAAT;AACD,GARD,CAQE,OAAOkB,KAAP,EAAc;AACd,UAAM5C,GAAG,CAACE,OAAO,CAACW,QAAR,CAAiB+B,KAAK,CAACC,QAAN,CAAeV,IAAhC,CAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUc,sBAAV,CAAiC3C,MAAjC,EAAyC;AAC7C,MAAI,CAACA,MAAM,CAACM,KAAZ,EAAmB;AAClB,UAAMZ,GAAG,CAACE,OAAO,CAACW,QAAR,CAAiB,EAAjB,CAAD,CAAT;AACD;;AACD,QAAMC,MAAM,GAAGV,iBAAiB,CAACE,MAAM,CAACM,KAAR,CAAhC;;AACA,MAAI;AACF,UAAMqB,GAAG,GAAG,MAAM9B,KAAK,CAAC+C,GAAN,CAAU,IAAV,EAAgBpC,MAAhB,CAAlB;AAEA,UAAMsB,QAAQ,GAAG;AACfC,MAAAA,EAAE,EAAEJ,GAAG,CAACE,IAAJ,CAASI,GADE;AAEfC,MAAAA,QAAQ,EAAEP,GAAG,CAACE,IAAJ,CAASK,QAFJ;AAGfT,MAAAA,KAAK,EAAEE,GAAG,CAACE,IAAJ,CAASJ,KAHD;AAIfU,MAAAA,UAAU,EAAE,EAJG;AAKfC,MAAAA,SAAS,EAAE;AALI,KAAjB;AAQA,UAAM1C,GAAG,CAACE,OAAO,CAACyC,WAAR,CAAoBrC,MAAM,CAACM,KAA3B,EAAkCwB,QAAlC,CAAD,CAAT;AACD,GAZD,CAYE,OAAOQ,KAAP,EAAc;AACd,UAAM5C,GAAG,CAACE,OAAO,CAACW,QAAR,CAAiB+B,KAAjB,CAAD,CAAT;AACD;AACF","sourcesContent":["import { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nimport axios from \"../../axios/auth\";\nimport {createHTTPHeaders }from \"../../shared/utility\"\n\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logoutSuccess());\n}\n\nexport function* logoutSaga(action) {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n  if (!action.token) {\n    yield put(actions.authFail({}));\n  } \n  const config = createHTTPHeaders(action.token)\n\n  const url = \"logout\";\n  try {\n    yield axios.post(url,{}, config);\n    yield put(actions.logoutSuccess());\n  } catch (e) {\n    console.log(\"Unable to Log Out\");\n  }\n}\n\nexport function* authCheckState() {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(\n      localStorage.getItem(\"expirationDate\")\n    );\n    if (expirationDate <= new Date()) {\n      put(actions.logout());\n    } else {\n      yield put(actions.getUserCredentials(token));\n      yield put(\n        actions.checkAuthTimeout(\n          (expirationDate.getTime() - new Date().getTime()) / 1000\n        )\n      );\n    }\n  }\n}\n\nexport function* loginUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    email: action.email,\n    password: action.password,\n  };\n  let url = \"login\";\n  try {\n    const res = yield axios.post(url, authData);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n\n    const userData = {\n      pk: res.data.user._id,\n      username: res.data.user.username,\n      email: res.data.user.email,\n      first_name: \"\",\n      last_name: \"\",\n    };\n\n    yield put(actions.authSuccess(action.token, userData));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\n\nexport function* signupUserSaga(action) {\n  yield put(actions.authStart());\n  const signupData = {\n    email : action.email,\n    password : action.password1,\n    username : action.username\n  }\n  let url = \"create\";\n  try {\n    const res = yield axios.post(url, signupData);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.authSuccess(res.data.token, action.email));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\n\nexport function* getUserCredentialsSaga(action) {\n   if (!action.token) {\n    yield put(actions.authFail({}));\n  } \n  const config = createHTTPHeaders(action.token)\n  try {\n    const res = yield axios.get(\"me\", config);\n\n    const userData = {\n      pk: res.data._id,\n      username: res.data.username,\n      email: res.data.email,\n      first_name: \"\",\n      last_name: \"\",\n    };\n\n    yield put(actions.authSuccess(action.token, userData));\n  } catch (error) {\n    yield put(actions.authFail(error));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}