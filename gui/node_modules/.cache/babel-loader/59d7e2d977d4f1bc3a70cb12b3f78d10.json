{"ast":null,"code":"import { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nimport axios from \"../../axios/auth\";\nimport { createHTTPHeaders } from \"../../shared/utility\";\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logoutSuccess());\n}\nexport function* logoutSaga(action) {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n\n  if (!action.token) {\n    yield put(actions.authFail({}));\n  }\n\n  const config = createHTTPHeaders(action.token);\n  const url = \"logout\";\n\n  try {\n    yield axios.post(url, {}, config);\n    yield put(actions.logoutSuccess());\n  } catch (e) {\n    console.log(\"Unable to Log Out\");\n  }\n}\nexport function* authCheckState() {\n  const token = localStorage.getItem(\"token\");\n\n  if (!token) {\n    put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(localStorage.getItem(\"expirationDate\"));\n\n    if (expirationDate <= new Date()) {\n      put(actions.logout());\n    } else {\n      yield put(actions.getUserCredentials(token));\n      yield put(actions.checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n    }\n  }\n}\nexport function* loginUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    email: action.email,\n    password: action.password\n  };\n  let url = \"login\";\n\n  try {\n    const res = yield axios.post(url, authData);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.getUserCredentials(res.data.token));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\nexport function* signupUserSaga(action) {\n  yield put(actions.authStart());\n  const username = action.username;\n  const email = action.email;\n  const password1 = action.password1;\n  const password2 = action.password2; // Request Body\n\n  const body = JSON.stringify({\n    username,\n    email,\n    password1,\n    password2\n  });\n  let url = \"registration/\";\n\n  try {\n    const res = yield axios.post(url, body);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.authSuccess(res.data.token, action.email));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\nexport function* getUserCredentialsSaga(action) {\n  if (!action.token) {\n    yield put(actions.authFail({}));\n  }\n\n  const config = createHTTPHeaders(action.token);\n\n  try {\n    const res = yield axios.get(\"me\", config);\n    const userData = {\n      pk: res.data._id,\n      username: res.data.username,\n      email: res.data.email,\n      first_name: \"\",\n      last_name: \"\"\n    };\n    yield put(actions.authSuccess(action.token, userData));\n  } catch (error) {\n    yield put(actions.authFail(error));\n  }\n}","map":{"version":3,"sources":["/Users/luispreciado/Documents/CSProjects/WebDevelopment/poke-api/gui/src/store/saga/auth.js"],"names":["put","delay","actions","axios","createHTTPHeaders","checkAuthTimeoutSaga","action","expirationTime","logoutSuccess","logoutSaga","localStorage","removeItem","token","authFail","config","url","post","e","console","log","authCheckState","getItem","logout","expirationDate","Date","getUserCredentials","checkAuthTimeout","getTime","loginUserSaga","authStart","authData","email","password","res","setItem","data","error","response","signupUserSaga","username","password1","password2","body","JSON","stringify","authSuccess","getUserCredentialsSaga","get","userData","pk","_id","first_name","last_name"],"mappings":"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","sourcesContent":["import { put, delay } from \"redux-saga/effects\";\nimport * as actions from \"../actions/index\";\nimport axios from \"../../axios/auth\";\nimport {createHTTPHeaders }from \"../../shared/utility\"\n\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(actions.logoutSuccess());\n}\n\nexport function* logoutSaga(action) {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expirationDate\");\n  localStorage.removeItem(\"userId\");\n  if (!action.token) {\n    yield put(actions.authFail({}));\n  } \n  const config = createHTTPHeaders(action.token)\n\n  const url = \"logout\";\n  try {\n    yield axios.post(url,{}, config);\n    yield put(actions.logoutSuccess());\n  } catch (e) {\n    console.log(\"Unable to Log Out\");\n  }\n}\n\nexport function* authCheckState() {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    put(actions.logout());\n  } else {\n    const expirationDate = yield new Date(\n      localStorage.getItem(\"expirationDate\")\n    );\n    if (expirationDate <= new Date()) {\n      put(actions.logout());\n    } else {\n      yield put(actions.getUserCredentials(token));\n      yield put(\n        actions.checkAuthTimeout(\n          (expirationDate.getTime() - new Date().getTime()) / 1000\n        )\n      );\n    }\n  }\n}\n\nexport function* loginUserSaga(action) {\n  yield put(actions.authStart());\n  const authData = {\n    email: action.email,\n    password: action.password,\n  };\n  let url = \"login\";\n  try {\n    const res = yield axios.post(url, authData);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.getUserCredentials(res.data.token));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\n\nexport function* signupUserSaga(action) {\n  yield put(actions.authStart());\n  const username = action.username;\n  const email = action.email;\n  const password1 = action.password1;\n  const password2 = action.password2;\n  // Request Body\n  const body = JSON.stringify({ username, email, password1, password2 });\n  let url = \"registration/\";\n  try {\n    const res = yield axios.post(url, body);\n    const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n    localStorage.setItem(\"token\", res.data.token);\n    localStorage.setItem(\"expirationDate\", expirationDate);\n    localStorage.setItem(\"userId\", action.email);\n    yield put(actions.authSuccess(res.data.token, action.email));\n    yield put(actions.checkAuthTimeout(3600));\n  } catch (error) {\n    yield put(actions.authFail(error.response.data));\n  }\n}\n\nexport function* getUserCredentialsSaga(action) {\n   if (!action.token) {\n    yield put(actions.authFail({}));\n  } \n  const config = createHTTPHeaders(action.token)\n \n\n  try {\n    const res = yield axios.get(\"me\", config);\n\n    const userData = {\n      pk: res.data._id,\n      username: res.data.username,\n      email: res.data.email,\n      first_name: \"\",\n      last_name: \"\",\n    };\n\n    yield put(actions.authSuccess(action.token, userData));\n  } catch (error) {\n    yield put(actions.authFail(error));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}